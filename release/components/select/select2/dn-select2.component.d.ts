/**
 * Created by cabbar on 12.04.2017.
 */
import { AfterViewInit, DoCheck, ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor, FormControl } from '@angular/forms';
import { Observable } from 'rxjs/Rx';
import { DnSelect2Item } from './dn-select2-item';
import { DnSelect2Messages } from './dn-select2-messages';
import { DnSelect2ResultsComponent } from './dn-select2-results/dn-select2-results.component';
import { DnSelect2Service } from './dn-select2.service';
export declare class DnSelect2Component<T> implements AfterViewInit, DoCheck, ControlValueAccessor {
    private service;
    private el;
    MORE_RESULTS_MSG: string;
    NO_RESULTS_MSG: string;
    messages: DnSelect2Messages;
    term: FormControl;
    resultsVisible: boolean;
    listData: DnSelect2Item[];
    fullDataList: DnSelect2Item[];
    selectedItems: DnSelect2Item[];
    searchFocused: boolean;
    onTouchedCallback: () => void;
    onChangeCallback: (_: any) => void;
    requestInProgress: boolean;
    dataSourceProvider: (term: string, displaySelect: (_: DnSelect2Item) => string) => Observable<T[]>;
    selectedProvider: (ids: string[]) => Observable<T[]>;
    dnSelect2ItemAdapter: (entity: T) => DnSelect2Item;
    referenceMode: 'entity' | 'id';
    multiple: boolean;
    searchDelay: number;
    css: string;
    name: string;
    placeholder: string;
    minimumInputLength: number;
    searchable: boolean;
    disabled: boolean;
    searchIcon: string;
    searchIconMulti: string;
    displaySelect: (_: DnSelect2Item) => string;
    selectedText: (_: DnSelect2Item) => string;
    deleteIcon: string;
    serviceUrl: string;
    data: any[];
    resultsCount: any;
    clientMode: boolean;
    onSelect: EventEmitter<DnSelect2Item>;
    onRemove: EventEmitter<DnSelect2Item>;
    results: DnSelect2ResultsComponent;
    onAfterViewInitCallback: () => void;
    private termInput;
    private placeholderSelected;
    private oldServiceUrl;
    constructor(service: DnSelect2Service, el: ElementRef);
    focus(): void;
    focusInput(): void;
    focusInputAndShowResults(): void;
    getCountMessage(): string;
    getCss(): string;
    getInputWidth(): string;
    getMinHeight(): string;
    getPlaceholder(): string;
    getSelectText(item: DnSelect2Item): string;
    getService(): DnSelect2Service;
    isHideable(): boolean;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    onBlur(): void;
    onFocus(): void;
    onItemSelected(item: DnSelect2Item): void;
    onKeyDown(ev: any): void;
    onKeyPress(ev: any): void;
    onKeyUp(ev: any): void;
    outFocus(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    removeItem(item: DnSelect2Item): void;
    removeSelected(): void;
    removeValidatation(): void;
    selectValidatation(item: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(selectedValues: any): void;
    private adaptItems(items);
    private alreadySelected(item);
    private bindData();
    private containsText(item, term);
    private fetchAndfilterLocalData(term);
    private fetchData(term);
    private filterLocalData(term);
    private getEntities();
    private getSelectedIds();
    private handleMultipleWithEntities(selectedValues);
    private handleMultipleWithIds(selectedValues);
    private handleSingleWithId(id);
    private loadData();
    private loadDataFromObservable(term);
    private populateItemsFromEntities(selectedValues);
    private populateItemsFromIds(selectedValues);
    private setPlaceholderText(item);
    private subscribeToChangesAndLoadDataFromObservable();
    private subscribeToResults(observable);
}
